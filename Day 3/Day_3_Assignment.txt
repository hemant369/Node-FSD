Question: Details about Callbacks
Answer: Callbacks in JavaScript are functions that are passed as arguments to other functions.
They are a fundamental concept in JavaScript and are commonly used in scenarios where we need to ensure
that certain code runs only after a particular operation finishes. Callbacks allow you to handle the results of an asynchronous operation in a non-blocking manner,
which means that the program can continue to run while the operation is being executed.

-----------------------------------------------------------------------------------------------
Question: What kind of applications we can create using node js?
Answer: Node.js can be used to build a wide variety of applications across different domains due to its non-blocking,
        event-driven architecture and rich ecosystem of libraries and frameworks. 

Example: Real time chat, Social Media Apps, Single page apps, Ridesharing apps, Internet of Things, Streaming Apps

-------------------------------------------------------------------------------------------------

Question: Find out more details  about "Event Loops" in node js
Answer: An event loop is an event-listener which functions inside the NodeJS environment and is always ready to listen, process, and output for an event.
        An event can be anything from a mouse click to a keypress or a timeout.

1. Node.js is built on an event-driven, non-blocking I/O model.
   This means that instead of waiting for I/O operations (such as file I/O, network requests, or timers) to complete before moving on to the next task,
   Node.js initiates such operations and continues executing other code.

2. Node.js operates on a single-threaded event loop. This means that all JavaScript code runs on a single thread,
   and there are no additional threads created for handling I/O operations or other tasks. 

3. Node.js uses non-blocking I/O operations, which means that while an I/O operation is in progress (such as reading from a file or making a network request),
   Node.js can continue executing other code instead of waiting for the operation to complete.

-------------------------------------------------------------------------------------------------

Question: What are differences between MySql and MongoDb?  
Answer:

1. MySQl: MySQL is a popular open-source relational database management system (RDBMS)
   MongoDB:  MongoDB stores data in JSON-like documents that can vary in structure. It is a popular NoSQL database.

2. MySQl: In MySQL, each individual records are stored as ‘rows’ in a table.
   MongoDB: In MongoDB, each individual records are stored as ‘documents’.

3. MySQl:  MySQL uses SQL (Structured Query Language) for querying and manipulating data.
	   SQL is a powerful language for working with structured data and supports a wide range of operations such as SELECT, INSERT, UPDATE, DELETE, JOIN, and GROUP BY.
   MongoDB: MongoDB uses a query language based on JSON-like syntax.
            Queries are performed using methods provided by the MongoDB query language, such as find(), findOne(), updateOne(), deleteOne() 

4. MySQl: MySQL requires a predefined schema where tables and columns must be defined before inserting data.
          Changes to the schema, such as adding or modifying columns, may require altering the table structure, which can impact existing data.
   MongoDB: MongoDB offers schema flexibility, allowing documents within a collection to have different structures. 
            This flexibility makes it well-suited for applications with evolving data requirements, as new fields can be added to documents without affecting existing data.

---------------------------------------------------------------------------------------------------

Question: What is "let"  keyword in javascript? Diff. between  "var" and "let" keyword? 
Answer: In JavaScript, the let keyword is used to declare variables with block scope. 
        Variables defined with let can not be redeclared.

Difference:

1. Variables declared with let are block-scoped, meaning they are only accessible within the block.
   Variables declared with var have function scope, meaning they are accessible throughout the function in which they are declared.

2. Variables declared with let cannot be re-declared within the same block scope.
   Variables declared with var can be re-declared within the same function scope without raising an error.

3. Variables declared with let at the global scope do not become properties of the global object.
   Variables declared with var at the global scope become properties of the global object.
    