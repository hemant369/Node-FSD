Question: What is Views in MySQL?
Answer: A VIEW in SQL Server is like a virtual table that contains data from one or multiple tables.
It does not hold any data and does not exist physically in the database. The view name should be unique in a database. It contains a set of predefined SQL queries to fetch data from the database.
It can contain database tables from single or multiple databases as well.

Uses:
1. Views can abstract complex queries or joins into a single, easy-to-use virtual table. 
2. Views can be used to restrict access to sensitive data.
   By granting users access to specific views rather than directly to tables.
3. Views can improve query performance by precomputing and storing the results of complex or frequently executed queries
4. Views can transform data into a more usable or meaningful format.
   For example, you can use views to aggregate data, pivot tables, or perform calculations.


Syntax:
	 CREATE VIEW Name AS  
	 Select column1, Column2...Column N From tables  
	 Where conditions; // not compulsory

Example:
 	CREATE VIEW EmployeeRecords As
	Select name, email, phone, address from Employee
	where gender='M';

	Select * from EmployeeRecords; 

----------------------------------------------------------------------------------------------------

DELIMITER $$

CREATE PROCEDURE GetEmployeeDetails (IN dept_name VARCHAR(100))
BEGIN
    SELECT * FROM Employees
    WHERE department_name = dept_name;
END$$

DELIMITER ;

CALL GetEmployeeDetailsByDeptName('Department_Name');

-----------------------------------------------------------------------------------------------------

DELIMITER $$

CREATE PROCEDURE GetEmployeeSalaryCount( OUT avg_salary_count INT)
BEGIN
	DECLARE avg_salary DECIMAL(10,2);
	
	SELECT AVG(salary) INTO avg_salary from Employees;
	
	SELECT COUNT(*) INTO avg_salary_count FROM Employees WHERE salary>avg_salary;
END $$

DELIMITER ;

CALL GetEmployeeSalaryCount(@count);
SELECT @count as Avg_Employee_Salary;

--------------------------------------------------------------------------------------------------------

DELIMITER $$

CREATE PROCEDURE InsertIntoEmp (
    IN emp_id INT,
    IN emp_name VARCHAR(100),
    IN emp_salary DECIMAL(10, 2),
    IN emp_dept VARCHAR(100)
)
BEGIN
   	 INSERT INTO emp (emp_id, emp_name, emp_salary, emp_dept)
    	 VALUES (emp_id, emp_name, emp_salary, emp_dept);
END$$

DELIMITER ;

CALL InsertIntoEmp(369, 'Hemant Dandotiya', 50000.00, 'MR');

--------------------------------------------------------------------------------------------------------

CREATE VIEW MaxSalaryJob AS
SELECT job, MAX(salary) AS max_salary
FROM Employees
GROUP BY job;

--------------------------------------------------------------------------------------------------------

SQL DISTINCT clause is used to remove the duplicates columns from the result set.
The distinct keyword is used with select keyword. The unique values are fetched when we use the distinct keyword.

Syntax:
	SELECT DISTINCT expressions  
	FROM tables  
        [WHERE conditions];  

-----------------------------------------------------------------------------------------------------------

CREATE TABLE ProductsLogs (
    Id INT AUTO_INCREMENT PRIMARY KEY,
    Operation VARCHAR(100),
    ProductId INT,
    ProductName VARCHAR(255),
    Date DATE,
    Time TIME,
    Message TEXT
);

------------------------------------------------------------------------------------------------------------

DELIMITER $$

CREATE TRIGGER After_Product_Insert
AFTER INSERT ON Products
FOR EACH ROW
BEGIN
    INSERT INTO ProductsLogs (Operation, ProductId, ProductName, Date, Time, Message)
    VALUES ('INSERT', NEW.ProductId, NEW.ProductName, CURDATE(), CURTIME(), 'New product inserted');
END$$

DELIMITER ;

INSERT INTO ProductsLogs VALUES('fast computing,46,'Laptop',CURDATE(), CURTIME());

------------------------------------------------------------------------------------------------------------

DELIMITER $$

CREATE TRIGGER After_Product_Delete
AFTER DELETE ON Products
FOR EACH ROW
BEGIN
    INSERT INTO ProductsLogs (Operation, ProductId, ProductName, Date, Time, Message)
    VALUES ('DELETE', OLD.ProductId, OLD.ProductName, CURDATE(), CURTIME(), 'Product deleted');
END$$

DELIMITER ;

