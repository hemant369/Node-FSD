Question: What is an Event Loop?
Answer: In JavaScript, the event loop is a fundamental mechanism that enables the asynchronous execution of code. 
Itâ€™s an essential part of the JavaScript runtime environment, allowing the language to handle non-blocking operations efficiently. 
The event loop is responsible for managing the execution of code, handling events, and maintaining the flow of control.

How do Event loops work?

Call Stack:
JavaScript uses a call stack to keep track of the currently executing function (where the program is in its execution).
Callback Queue:
Asynchronous operations, such as I/O operations or timers, are handled by the browser or Node.js runtime. When these operations are complete, corresponding functions (callbacks) are placed in the callback queue.
Event Loop:
The event loop continuously checks the call stack and the callback queue. If the call stack is empty, it takes the first function from the callback queue and pushes it onto the call stack for execution.
Execution:
The function on top of the call stack is executed. If this function contains asynchronous code, it might initiate further asynchronous operations.
Callback Execution:
When an asynchronous operation is complete, its callback is placed in the callback queue.
Repeat:
The event loop continues this process, ensuring that the call stack is always empty before taking the next function from the callback queue.

Question: What are promises in javascript?
Answer: In JavaScript, a promise is an object representing the eventual completion (or failure) of an asynchronous operation, and its resulting value. It allows you to handle asynchronous code in a more organized and manageable way, avoiding the "callback hell" problem often associated with deeply nested callbacks.

Promises have three states:

Pending: Initial state, neither fulfilled nor rejected.
Fulfilled: The operation completed successfully.
Rejected: The operation failed.
A promise can transition from pending to either fulfilled or rejected, but once it's settled (fulfilled or rejected), it remains in that state and cannot transition to any other state.

Example: 

function fetchData() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      const success = true; 
      success ? resolve('Data fetched successfully') : reject('Error fetching data');
    }, 2000);
  });
}


fetchData()
  .then(data => console.log(data))
  .catch(error => console.error(error));

Question: What are async and await keyword in javascript?
Answer: async and await are keywords introduced in ECMAScript 2017 (ES8) that provide a more readable and synchronous-like way to work with asynchronous code in JavaScript.

async Function:

The async keyword is used to declare a function as asynchronous. An async function always returns a promise implicitly, which resolves with the value returned by the function or rejects with an error thrown from the function.
Inside an async function, you can use the await keyword to pause the execution of the function until a promise is settled (resolved or rejected). This allows you to write asynchronous code in a more sequential and readable manner, similar to synchronous code.

await Operator:

The await keyword is used to pause the execution of an async function and wait for a promise to be settled (resolved or rejected). It can only be used inside an async function.
When await is used with a promise, the async function waits for the promise to resolve, and then it resumes execution, returning the resolved value of the promise. If the promise is rejected, an error is thrown, which can be caught using try/catch.


